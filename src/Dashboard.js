import { useState, useRef } from "react";
import { analyzeImage } from './services/geminiService';
import { useNavigate } from 'react-router-dom';
import "./Dashboard.css";

function Dashboard() {
  const navigate = useNavigate();
  const [preview, setPreview] = useState(null);
  const [fileInfo, setFileInfo] = useState("");
  const [showResult, setShowResult] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [aiResult, setAiResult] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [language, setLanguage] = useState("en");
  const inputRef = useRef(null);

  const labels = {
    en: {
      upload: "Upload an Image",
      dragDrop: "üìÅ Drag & drop or click to select an image",
      reset: "Reset",
      submit: "Submit",
      processing: "Your uploaded image is processed!",
      analyzing: "üåÄ Analyzing with AI...",
      logout: "‚Üê Logout",
      aiResult: "[AI diagnosis result will appear here]",
      disclaimer: "*AI results are for informational purposes only and not a substitute for professional medical advice.",
      assistant: "‚ú® AI Assistant"
    },
    ta: {
      upload: "‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç",
      dragDrop: "üìÅ ‡Æá‡Æ¥‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Æø‡Æ≥‡Æø‡Æï‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
      reset: "‡ÆÆ‡ØÄ‡Æü‡Øç‡Æü‡ÆÆ‡Øà",
      submit: "‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
      processing: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà AI ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ!",
      analyzing: "üåÄ AI ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ...",
      logout: "‚Üê ‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Øá‡Æ±‡ØÅ",
      aiResult: "[AI ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ ‡Æá‡Æô‡Øç‡Æï‡ØÅ ‡Æ§‡Øã‡Æ©‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç]",
      disclaimer: "*AI ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æï ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá, ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Ææ‡Æï‡Ææ‡Æ§‡ØÅ.",
      assistant: "‚ú® AI ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç"
    },
    hi: {
      upload: "‡§è‡§ï ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
      dragDrop: "üìÅ ‡§õ‡§µ‡§ø ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•Ä‡§Ç‡§ö‡•á‡§Ç ‡§Ø‡§æ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç",
      reset: "‡§∞‡•Ä‡§∏‡•á‡§ü",
      submit: "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
      processing: "‡§Ü‡§™‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à!",
      analyzing: "üåÄ AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...",
      logout: "‚Üê ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
      aiResult: "[AI ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§π‡•ã‡§ó‡§æ]",
      disclaimer: "*AI ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§∏‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§π ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
      assistant: "‚ú® AI ‡§∏‡§π‡§æ‡§Ø‡§ï"
    }
  };

  const getPromptText = () => {
    switch (language) {
      case "ta":
        return "‡Æá‡Æ®‡Øç‡Æ§ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç.";
      case "hi":
        return "‡§á‡§∏ ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§";
      default:
        return "Analyze this medical image.";
    }
  };

  const handleSubmit = async () => {
    if (!inputRef.current?.files?.[0]) return;
    const file = inputRef.current.files[0];
    setShowResult(true);
    setIsLoading(true);
    setAiResult("");

    try {
      const result = await analyzeImage(file, getPromptText());
      setAiResult(result);
    } catch (err) {
      setAiResult("‚ùå Failed to analyze image.");
    } finally {
      setIsLoading(false);
    }
  };

  const home = () => navigate('/');

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(e.type === "dragenter" || e.type === "dragover");
  };

  const previewImage = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    document.body.classList.add("loading");
    reader.onload = () => {
      setPreview(reader.result);
      setFileInfo(`${file.name} ‚Äî ${(file.size / 1024).toFixed(2)} KB`);
      document.body.classList.remove("loading");
    };
    reader.readAsDataURL(file);
  };

  const handleReset = () => {
    setPreview(null);
    setFileInfo("");
    setShowResult(false);
    navigate('/Dashboard');
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      previewImage({ target: { files: e.dataTransfer.files } });
    }
  };

  const t = labels[language];

  return (
    <div className="outerz">
      <div className="navbar">
        <div className="logo"><b>HealScope.ai</b></div>
        <div className="left">
          <select value={language} onChange={(e) => setLanguage(e.target.value)} className="btn lang">
            <option value="en">English</option>
            <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
            <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
          </select>
          <button className="btn btn-prim" onClick={home}>{t.logout}</button>
        </div>
      </div>

      <div className={`dashboardz ${showResult ? "slide-left" : ""}`}>
        <h1>{t.upload}</h1>
        <label className={`uploadbox ${dragActive ? "drag-active" : ""}`}
          onDragEnter={handleDrag}
          onDragOver={handleDrag}
          onDragLeave={handleDrag}
          onDrop={handleDrop}
        >
          {!preview && <p>{t.dragDrop}</p>}
          <input type="file" accept="image/*" onChange={previewImage} ref={inputRef} />
          {preview && (
            <div className="preview centered-preview">
              <img src={preview} alt="Preview" />
              <div className="file-info">{fileInfo}</div>
            </div>
          )}
        </label>

        <div className="buttons">
          <button onClick={handleReset} className="buttonz">{t.reset}</button>
          <button onClick={handleSubmit} className="buttonz">{t.submit}</button>
        </div>
      </div>

      {showResult && (
        <div className={`result-card ${showResult ? "show" : ""}`}>
          <h2>{t.assistant}</h2>
          <p>{t.processing}</p>
          <div className="ai-chat">
            {isLoading ? <p>{t.analyzing}</p> : <p>{aiResult || t.aiResult}</p>}
          </div>
          <div className="disclaimer">
            <p>{t.disclaimer}</p>
          </div>
        </div>
      )}
    </div>
  );
}

export default Dashboard;
